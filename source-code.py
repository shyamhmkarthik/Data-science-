# -*- coding: utf-8 -*-
"""Project.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1FEbOC2vRV-P2XR8zQE0MlAPdfkKpQZ6j

# upload Dataset
"""

from google.colab import files
uploaded = files.upload()

"""# Load the Dataset"""

import pandas as pd
df = pd.read_csv('credit_card_fraud_dataset.csv')
df.head()

"""# Data Exploration"""

# Dataset shape
print("Shape:", df.shape)

# Info
df.info()

# Summary statistics
df.describe()

"""# Check for Missing Values and Duplicates"""

# Missing values
print("Missing Values:\n", df.isnull().sum())

# Duplicates
print("Duplicate Rows:", df.duplicated().sum())

"""# Visualize a Few Features"""

import matplotlib.pyplot as plt
import seaborn as sns

# Distribution of transaction amount
sns.histplot(df['Amount'], bins=50, kde=True)
plt.title('Transaction Amount Distribution')
plt.show()

# Fraud count
sns.countplot(data=df, x='IsFraud')
plt.title('Fraud vs Non-Fraud')
plt.show()

# Boxplot of amount by fraud
sns.boxplot(x='IsFraud', y='Amount', data=df)
plt.title('Amount by Fraud Status')
plt.show()

"""# Identify Target and Features"""

# Target variable
target = 'IsFraud'

# Drop unneeded columns
features = df.drop(['TransactionID', 'TransactionDate', target], axis=1).columns.tolist()

print("Target:", target)
print("Features:", features)

"""# Convert Categorical Columns to Numerical"""

# Identify categorical columns
categorical_cols = df[features].select_dtypes(include='object').columns
print("Categorical Columns:", categorical_cols.tolist())

"""# One-Hot Encoding"""

df_encoded = pd.get_dummies(df, columns=categorical_cols, drop_first=True)

"""# Feature Scaling"""

from sklearn.preprocessing import StandardScaler

scaler = StandardScaler()
X = df_encoded.drop(['TransactionID', 'TransactionDate', target], axis=1)
y = df_encoded[target]

X_scaled = scaler.fit_transform(X)

"""# Train-Test Split"""

from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42, stratify=y)

"""# Model Building"""

from sklearn.ensemble import RandomForestClassifier

model = RandomForestClassifier(random_state=42)
model.fit(X_train, y_train)

"""# Evaluation"""

from sklearn.metrics import classification_report, confusion_matrix, accuracy_score

y_pred = model.predict(X_test)

print("Accuracy:", accuracy_score(y_test, y_pred))
print("\nClassification Report:\n", classification_report(y_test, y_pred))
sns.heatmap(confusion_matrix(y_test, y_pred), annot=True, fmt='d', cmap='Blues')
plt.title('Confusion Matrix')
plt.show()

"""# Make Predictions from New Input"""

# Example new input
new_input = {
    'Amount': 100.0,
    'MerchantID': 123,
    'TransactionType_purchase': 1,
    'TransactionType_refund': 0,
    'Location_Dallas': 0,
    'Location_New York': 1,
    # Add remaining dummy variables set to 0 or 1 as needed
}

#Create a template row
template_input = pd.DataFrame([np.zeros(len(X.columns))], columns=X.columns)

#  Update with real values
for key, value in new_input.items():
    if key in template_input.columns:
        template_input[key] = value
    else:
        print(f"‚ö†Ô∏è Warning: '{key}' not in training features, skipping.")

# Scale input using the fitted scaler
new_df_scaled = scaler.transform(template_input)

#  Predict
prediction = model.predict(new_df_scaled)
print("Prediction:", "Fraud" if prediction[0] == 1 else "Not Fraud")

"""# Convert to DataFrame and Encode"""

#  Get the training columns from X
training_columns = X.columns

# Step 2: Create a zero-filled DataFrame with correct structure
input_aligned = pd.DataFrame([np.zeros(len(training_columns))], columns=training_columns)

#  Update only the matching keys in new_input
for key, value in new_input.items():
    if key in input_aligned.columns:
        input_aligned[key] = value
    else:
        print(f"‚ö†Ô∏è Skipping '{key}' - not in training features.")

#  Scale and predict
input_scaled = scaler.transform(input_aligned)
prediction = model.predict(input_scaled)

print("Prediction:", "Fraud" if prediction[0] == 1 else "Not Fraud")

"""# Install Gradio"""

!pip install gradio

"""# Deployment ‚Äì Interactive App (Gradio)"""

import gradio as gr

def predict_fraud(Amount, MerchantID, TransactionType, Location):
    # Rebuild input
    input_data = {col: 0 for col in X.columns}
    input_data['Amount'] = Amount
    input_data['MerchantID'] = MerchantID
    if f'TransactionType_{TransactionType}' in input_data:
        input_data[f'TransactionType_{TransactionType}'] = 1
    if f'Location_{Location}' in input_data:
        input_data[f'Location_{Location}'] = 1

    df_input = pd.DataFrame([input_data])
    scaled_input = scaler.transform(df_input)
    pred = model.predict(scaled_input)
    return "Fraud" if pred[0] == 1 else "Not Fraud"

gr.Interface(
    fn=predict_fraud,
    inputs=[
        gr.Number(label="Transaction Amount"),
        gr.Number(label="Merchant ID"),
        gr.Dropdown(df['TransactionType'].unique().tolist(), label="Transaction Type"),
        gr.Dropdown(df['Location'].unique().tolist(), label="Location")
    ],
    outputs="text",
    title="üí≥ Credit Card Fraud Predictor"
).launch()